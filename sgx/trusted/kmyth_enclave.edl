enclave {

	from "sgx_tstdc.edl" import *;
	from "sgx_tsgxssl.edl" import *;
	from "sgx_pthread.edl" import *;

	include "sgx_tseal.h"
	include "stdbool.h"
	include "time.h"

  trusted {

    /**
     * @brief Seals input data using SGXs built-in sealing mechanism.
     *
     * @param[in]  in_data  Pointer to the data to be sealed.
     *
     * @param[in]  in_size  The size of in_data in bytes.
     *
     * @param[out] out_data Pointer to space to hold the encrypted data, must
     *                      allready be allocated with size out_size.
     *
     * @param[in]  out_size  The size of out_data. Must be determined by first
     *                       calling enc_get_sealed_size with in_size.
     *
     * @param[in]  key_policy The SGX key policy to use for the sealing key.
     *                        Must be SGX_KEYPOLICY_MRSIGNER (to bind to the 
     *                        signer of the enclave) or SGX_KEYPOLICY_MRENCLAVE
     *                        (to bind to the enclave.)
     * 
     * @param[in] attribute_mask The SGX attribute mask structure to be used
     *                           for the sealing. If attribute_mask.flags is 0,
     *                           the recommended default value will be used.
     *
     * @return 0 on success, an SGX error on error.
     */
    public int enc_seal_data([in, size=in_size] const uint8_t *in_data,
                             uint32_t in_size,
                             [user_check] uint8_t *out_data,
                             uint32_t out_size,
    		                     uint16_t key_policy,
    		                     sgx_attributes_t attribute_mask);
    
    /**
     * @brief Computes the output buffer size required to seal input data
     *        of size in_size.
     *
     * @param[in]  in_size The size of the plaintext data to be encrypted
     *
     * @param[out] size    The size of the ciphertext
     *
     * @return 0 in success, SGX_ERROR_INVALID_PARAMETER on error
     */
    public int enc_get_sealed_size(uint32_t in_size,
                                   [out, count=1] uint32_t *size);
    
    
    /**
     * @brief SGX unseals the provided data and places it into the
     *        kmyth_unsealed_data_table.
     *
     * @param[in] data_size The size of the ciphertext
     *
     * @param[in] data      The ciphertext
     *
     * @param[out] handle   A pointer to a uint64_t to hold the handle.
     *
     * @return true on success, false on failure. The return value MUST be checked.
     *
     */
    public bool kmyth_unseal_into_enclave(uint32_t data_size,
                                          [in, count=data_size] uint8_t* data,
                                          [out] uint64_t* handle);
    
    /**
     * @brief Initializes the necessary values to maintain kmyth_unsealed_data_table.
     *
     * @return 0 on success, -1 on failure.
     */
    public int kmyth_unsealed_data_table_initialize(void);
    
    /**
     * @brief Cleans up (and frees all memory for) the kmyth_unsealed_data_table.
     *
     * @return 0 on success, -1 on failure.
     */
    public int kmyth_unsealed_data_table_cleanup(void);

    /**
     * @brief Negotiates a session key (using ECDH) for creating a secure
     *        connection with key server and then retrieves a key from the
     *        key server using that secure connection.
     *
     * @param[in]  client_private_bytes      DER-formatted private signing
     *                                       key for the client (enclave)
     *
     * @param[in]  client_private_bytes_len  Length (in bytes) of the client
     *                                       (enclave) private key
     *
     * @param[in]  client_cert_bytes         DER-formatted public certificate
     *                                       for the client (enclave)
     *
     * @param[in]  client_cert_bytes_len     Length (in bytes) of the client
     *                                       (enclave) public certificate
     *
     * @param[in]  server_cert_bytes         DER-formatted public certificate
     *                                       for the key server
     *
     * @param[in]  server_cert_bytes_len     Length (in bytes) of the key
     *                                       server certificate
     *
     * @param[in]  server_host               Hostname/IP string for key server.
     *
     * @param[in]  server_host_len           Length of hostname/IP string for
     *                                       the key server
     *
     * @param[in]  server_port               TCP port for key server
     *
     * @param[in]  key_id                    ID string used to specify the key
     *                                       to be retrieved from the server
     *                                       (not null-terminated)
     *
     * @param[in]  key_id_len                Length of the requested key's ID
     *                                       string
     *
     * @return 0 on success, -1 on failure
     */
    public int kmyth_enclave_retrieve_key_from_server([in, count=client_private_bytes_len]
                                                        uint8_t* client_private_bytes,
                                                      size_t client_private_bytes_len,
                                                      [in, count=client_cert_bytes_len]
                                                        uint8_t* client_cert_bytes,
                                                      size_t client_cert_bytes_len,                                                                                                              
                                                      [in, count=server_cert_bytes_len]
                                                        uint8_t* server_cert_bytes,
                                                      size_t server_cert_bytes_len,
                                                      [in, count=server_host_len]
                                                        const char* server_host,
                                                      int server_host_len,
                                                      int server_port,
                                                      [in, count=key_id_len]
                                                        unsigned char* key_id,
                                                      size_t key_id_len);

  };

  untrusted {

    /**
     * @brief Supports calling logger from within enclave. Must pass information
     *        about the event out explicitly since we must invoke the logging API
     *        from untrusted space.
     *
     * @param[in] src_file_ptr     Pointer to source code filename string
     *
     * @param[in] src_func_ptr     Pointer to function name string
     *
     * @param[in] src_line_ptr     Pointer to source code line number integer
     *
     * @param[in] severity_ptr     Pointer to integer representing the severity
     *                             level of the event to be logged.
     *
     * @param[in] message_ptr      Pointer to string containing the message to
     *                             be logged.
     *
     * @return                     None
     */
    void log_event_ocall([in] const char **src_file_ptr,
                         [in] const char **src_func_ptr,
                         [in] const int *src_line_ptr,
                         [in] int *severity_ptr,
                         [in] const char **message_ptr);


    /**
     * @brief Supports freeing untrusted memory resources from within the
              enclave. As an example of where this might be needed, If a
              pointer passed as a parameter of an OCALL is allocated by
              untrusted code, the trusted code cannot use a simple free()
              call to de-allocate that memory block. This function, then,
              attempts to address situations such as these.
     *
     * @param[in] mem_block_ptr    Pointer to memory buffer to be freed.
     *
     * @return                     None
     */
    void OPENSSL_free_ocall([user_check] void ** mem_block_ptr);

    /**
     * @brief Creates a socket connected to the external key server.
     *
     * @param[in]  server_host                String IP address or hostname used to
     *                                        connect to the key server.
     *
     * @param[in]  server_host_len            Length (in bytes) of server_host string.
     *
     * @param[in]  server_port                TCP port number used to
     *                                        connect to the key server.
     *
     * @param[out] socket_fd                  Pointer to the file descriptor
     *                                        number for a socket connected to
     *                                        the remote key server.
     *
     * @return 0 on success, 1 on failure
     */
    int setup_socket_ocall([in, count=server_host_len]
                             const char *server_host,
                           int server_host_len,
                           int server_port,
                           [out] int *socket_fd);

    /**
     * @brief Closes a socket connected to the external key server.
     *
     * @param[in] socket_fd                   File descriptor
     *                                        number for a socket connected to
     *                                        the remote key server.
     *
     * @return None
     */
    void close_socket_ocall(int socket_fd);

    /**
     * @brief Gets the current calendar time.
     *
     * @param[out] time                   Pointer to an object of type time_t,
     *                                    where the time value is stored.
     *
     * @return The current calendar time as a time_t object.
     */
    time_t time_ocall([out] time_t *timer);

    /**
     * @brief Supports exchanging signed 'public key' contributions between the
     *        client (enclave) and the server (separate process).
     *        With the exchange of this information, they can independently
     *        generate a common session key.
     *
     * @param[in]  client_hello                  Byte array containing enclave's
     *                                           'Client Hello' message, which
     *                                           initiates ECDH key agreement
     *                                           between enclave and remote
     *                                           peer (server)
     *
     * @param[in]  client_hello_len              Length (in bytes) of enclave's
     *                                           'Client Hello' message
     *
     * @param[out] remote_ephemeral_public       Pointer to remote (server)
     *                                           public ephemeral contribution
     *                                           to be exchanged with enclave
     *                                           (client)
     *
     * @param[out] remote_ephemeral_public_len   Pointer to length (in bytes)
     *                                           of remote (server) public
     *                                           ephemeral contribution.
     *
     * @param[out] remote_eph_pub_signature      Pointer to signature over
     *                                           remote (server) public
     *                                           ephemeral contribution.
     *
     * @param[out] remote_eph_pub_signature_len  Pointer to length (in bytes)
     *                                           of signature for remote
     *                                           (server) public ephemeral
     *                                           contribution.
     *
     * @param[in] socket_fd                      File descriptor number for
     *                                           a socket connected to
     *                                           the remote key server.
     */
    int ecdh_exchange_ocall([in, count=client_hello_len]
                               unsigned char *client_hello,
                             size_t client_hello_len,
                             [out] unsigned char **remote_contribution,
                             [out] size_t *remote_contribution_len,
                             [out] unsigned char **remote_contribution_signature,
                             [out] unsigned int *remote_contribution_signature_len,
                             int socket_fd);

    /**
     * @brief Send a message over the ECDH network connection.
     *
     * @param[in]  encrypted_msg              Pointer to the encrypted message.
     *
     * @param[in] encrypted_response_len     Length (in bytes)
     *                                        of the encrypted message.
     *
     * @param[in] socket_fd                   File descriptor number for
     *                                        a network socket with an
     *                                        active ECDH session.
     *
     * @return 0 on success, 1 on failure
     */
    int ecdh_send_msg_ocall([in, count=encrypted_msg_len]
                             unsigned char *encrypted_msg,
                             size_t encrypted_msg_len,
                             int socket_fd);

    /**
     * @brief Receive a message over the ECDH network connection.
     *
     * @param[out] msg         Pointer used to return the address of an
     *                         allocated buffer containing the received
     *                         message.
     *
     * @param[out] msg_len     Pointer to length (in bytes) of the
     *                         received message.
     *
     * @param[in] socket_fd    File descriptor number for a network
     *                         socket with an active ECDH session.
     *
     * @return 0 on success, 1 on failure
     */
    int ecdh_recv_msg_ocall([out] unsigned char **msg,
                            [out] size_t *msg_len,
                            int socket_fd);

  };

};
